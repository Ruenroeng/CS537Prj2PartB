Objectives:

    - To understand code for performing context-switches in the xv6 kernel.
    - To implement a basic MLQ scheduler and FIFO scheduling method.
    - To create system calls that get/set priority and another syscall to extract process states.

Notes:
    - A timer tick is essentially a single loop of the for loop in scheduler(). This is set in kernel/timer.c
    - The timeslices are going to be in lookup table. It's round-robin for higher-priority queues to complete before lower-prority queues will complete their work.
    - A process at a lower priority might get started but out-prioritied by a secondary process. 
    - 

Important places in the kernel for this project:
    - swtch() -- This is the code that's called that performs the context switch.
    - sched() -- This is the code that's called that initiates the context switch back to scheduler().
        ~It's called in exit(); when a process goes to sleep; and during yield().
            *yield() is called in trap.c in trap()
    - allocproc() -- only called for the first process that's created by the kernel (main). From here its all forking.
    - userinit() -- I don't know what this is but it's worth taking a look at

MLQ Specification:

    - Four priority levels, numbered from 3 (highest) down to 0 (lowest).
    - The time-slice associated with priority 3 is 8 timer ticks; for priority 2 it is 12 timer ticks; for priority 1 it is 16 timer ticks, 
        and for priority 0 it executes the process until completion (because it is FIFO).
    - Whenever the xv6 10 ms timer tick occurs, the highest priority ready process is scheduled to run.
    - The highest priority ready process is scheduled to run whenever the previously running process exits, sleeps, or otherwise yields the CPU.
    - You should not trigger a new scheduling event when a new process arrives, wakes, or has its priority modified through setpri(); 
        you should wait until a timer tick to schedule the highest priority process. 
    - If there are more than one process on the same priority level, then your scheduler should schedule all the processes at that particular 
        level in a round-robin fashion, except for priority level 0, which will be scheduled using a FIFO basis. For round-robin scheduling, 
        after a process consumes its time-slice it should be moved to the back of its queue. For example, if a process is at the highest priority level, 
        which has a time-slice of 8 timer ticks, then you should schedule this process for 8 ticks before moving to the next process.
    - When a timer tick occurs, whichever process was currently using the CPU should be considered to have used up an entire timer tick's worth of CPU, 
        even if it did not start at the previous tick (Note that a timer tick is different than the time-slice.)
    - When a new process arrives, it should inherit the priority of its parent process. The first user process should start at the highest priority.
    - If no higher priority job arrives and the running process does not relinquish the CPU, then that process is scheduled for an entire time-slice 
        before the scheduler switches to another process.
    - Whenever a process wakes or moves to a new priority, 
        it should always be added to the back of that queue with a full new time slice.

Syscalls to get/set priority

    - int setpri(int pid, int pri): It will set the priority of a specific process (specified by the first argument pid) to pri. pri should be an 
        integer between 0 and 3. You should check that both pid and pri are valid; if they are not, return -1. When the priority of a process is set, 
        the process should go to the end of the queue at that level and should be given a new time-slice of the correct length. The priority of a 
        process could be increased, decreased, or not changed (in other words, even when the priority of a process is set to its current priority, 
        that process should still be moved to the end of its queue and given a new timeslice). Note that calling setpri() may cause a new 
        process to have the highest priority in the system and thus need to be scheduled when the next timer tick occurs. (When testing your pinfo() 
        statistics below, we will not examine how you account for the case when setpri() is applied to the calling process.)
    - int getpri(int pid): It will returns the current priority of the process specified by pid. If pid is not valid, it returns -1. 

Syscalls to extract scheduling information

Because your MLQ implementations are all in the kernel level, you need to extract useful information for each process by creating this system 
call so as to better test whether your implementations work as expected. You'll need to create one system call for this project: Create new system calls:

int getpinfo(struct pstat * status): The argument status is a pointer to a struct pstat to which the kernel is going to fill in the information. 
    This system call returns 0 on success and -1 on failure. If success, some basic information about each process: its process ID, 
    how many timer ticks have elapsed while running in each level, which queue it is currently placed on (3, 2, 1, or 0), its current 
    procstate (e.g., SLEEPING, RUNNABLE, or RUNNING), etc will be filled in the pstat structure as defined


Hints

    - Again, most of the code for the scheduler is quite localized and can be found in proc.c; the associated header file, proc.h is
        also quite useful to examine. To change the scheduler, not too much code needs to be done; study its control flow and then try some small changes.
    - As part of the information that you track for each process, you will probably want to know its current priority level and the 
        number of timer ticks it has left.
    - It is much easier to deal with fixed-sized arrays in xv6 than linked-lists. For simplicity, we recommend that you use arrays 
        to represent each priority level.
    - You'll need to understand how to fill in the structure pstat in the kernel and pass the results to user space and how to pass the 
        arguments from user space to the kernel. You may want to stare at the routines like int argint(int n, int *ip) in syscall.c for some hints.
    - To run the xv6 environment, use make qemu-nox. Doing so avoids the use of X windows and is generally fast and easy. To quit,
        you have to know the shortcuts provided by the machine emulator, qemu. Type control-a followed by x to exit the emulation. 
        There are a few other commands like this available; to see them, type control-a followed by an h.


Next Steps:
    - Need to implement a process counter to INCREMENT and CLEAR OUT. This will need to be checked against the prority queue level for a process to determine 
      if it should keep running or if it should yield. If the process completes it's work it will exit() so likely, the status of the 
      process needs to checked in addition to it's time ticks.
    - Build the priority queue table
    - Implement a priority queue for processes to get added to (Maybe this is a struct?)
    - Implement a syscall that sets a processes priority.
    - Implement a syscall that gets a processes priority.
    - Implement a syscall that gets a processes information in the structure described above
